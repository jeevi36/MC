//create new folder inside that another folder named lib
//inside lib paste downlaoded bouncycastle
//outside lib folder create file.java

//to run command use ->   javac -cp ".;lib/bcprov-jdk18on-1.80.jar" MerkleOTS.java
//Next ->  java -cp ".;lib/bcprov-jdk18on-1.80.jar" MerkleOTS

import org.bouncycastle.jce.provider.BouncyCastleProvider;
import java.security.*;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;

public class MerkleOTS {

private static final int KEY_SIZE = 256; // Number of pairs in the key
private static final int HASH_SIZE = 32; // Size of each hash in bytes
private static final int TREE_HEIGHT = 4; // Height of the Merkle tree

static {
Security.addProvider(new BouncyCastleProvider());
}

public static class KeyPair {
public byte[][] privateKey;
public String[][] publicKey;

public KeyPair(byte[][] privateKey, String[][] publicKey) {

this.privateKey = privateKey;
this.publicKey = publicKey;
}
}

public static class MerkleTree {
public String root;
public List<String[]> authenticationPaths;

public MerkleTree(String root, List<String[]> authenticationPaths) {
this.root = root;
this.authenticationPaths = authenticationPaths;
}
}

public static KeyPair generateKeyPair() throws NoSuchAlgorithmException {
SecureRandom random = SecureRandom.getInstanceStrong();
MessageDigest sha256 = MessageDigest.getInstance("SHA-256");

byte[][] privateKey = new byte[KEY_SIZE * 2][HASH_SIZE];
String[][] publicKey = new String[KEY_SIZE][2];

for (int i = 0; i < KEY_SIZE; i++) {
byte[] privateKey0 = new byte[HASH_SIZE];
byte[] privateKey1 = new byte[HASH_SIZE];
random.nextBytes(privateKey0);
random.nextBytes(privateKey1);

privateKey[i * 2] = privateKey0;
privateKey[i * 2 + 1] = privateKey1;

publicKey[i][0] = Base64.getEncoder().encodeToString(sha256.digest(privateKey0));
publicKey[i][1] = Base64.getEncoder().encodeToString(sha256.digest(privateKey1));
}

return new KeyPair(privateKey, publicKey);
}

public static MerkleTree buildMerkleTree(List<String> publicKeys) throws
NoSuchAlgorithmException {
MessageDigest sha256 = MessageDigest.getInstance("SHA-256");
List<String[]> authenticationPaths = new ArrayList<>();

while (publicKeys.size() > 1) {
List<String> newLevel = new ArrayList<>();
for (int i = 0; i < publicKeys.size(); i += 2) {
String left = publicKeys.get(i);
String right = i + 1 < publicKeys.size() ? publicKeys.get(i + 1) : left;
String combinedHash = Base64.getEncoder().encodeToString(sha256.digest((left +
right).getBytes()));
newLevel.add(combinedHash);
authenticationPaths.add(new String[]{left, right});
}
publicKeys = newLevel;
}

return new MerkleTree(publicKeys.get(0), authenticationPaths);
}

public static byte[][] signMessage(String message, byte[][] privateKey) throws
NoSuchAlgorithmException {
MessageDigest sha256 = MessageDigest.getInstance("SHA-256");
byte[] messageHash = sha256.digest(message.getBytes());

byte[][] signature = new byte[KEY_SIZE][HASH_SIZE];
for (int i = 0; i < KEY_SIZE; i++) {
int bit = (messageHash[i / 8] >> (i % 8)) & 1;
signature[i] = privateKey[i * 2 + bit];
}

return signature;
}

public static boolean verifySignature(String message, byte[][] signature, String[][] publicKey,
String root, List<String[]> authenticationPaths) throws NoSuchAlgorithmException {
MessageDigest sha256 = MessageDigest.getInstance("SHA-256");
byte[] messageHash = sha256.digest(message.getBytes());

for (int i = 0; i < KEY_SIZE; i++) {
int bit = (messageHash[i / 8] >> (i % 8)) & 1;
String hash = Base64.getEncoder().encodeToString(sha256.digest(signature[i]));
if (!hash.equals(publicKey[i][bit])) {
return false;
}
}

String hash = Base64.getEncoder().encodeToString(sha256.digest(signature[0]));
for (String[] path : authenticationPaths) {
String left = path[0];
String right = path[1];
hash = Base64.getEncoder().encodeToString(sha256.digest((left + right).getBytes()));
}

return hash.equals(root);

}

public static void main(String[] args) {
try {
// Generate key pair
KeyPair keyPair = generateKeyPair();
List<String> publicKeys = new ArrayList<>();
for (String[] pk : keyPair.publicKey) {
publicKeys.add(pk[0] + pk[1]);
}

// Build Merkle tree
MerkleTree merkleTree = buildMerkleTree(publicKeys);
System.out.println("Merkle Tree Root: " + merkleTree.root);

// Sign a message
String message = "Hello, Merkle!";
byte[][] signature = signMessage(message, keyPair.privateKey);
System.out.println("Signature:");
for (byte[] sig : signature) {
System.out.println(Base64.getEncoder().encodeToString(sig));
}

// Verify the signature
boolean isValid = verifySignature(message, signature, keyPair.publicKey, merkleTree.root,
merkleTree.authenticationPaths);
System.out.println("Signature valid: " + isValid);

} catch (NoSuchAlgorithmException e) {
e.printStackTrace();
}

}
}
